
### MM/DD/YYYY ###
Name

1. Enumerated list of edits made
2. Place most recent logs above older ones



### 4/1/2017 ###
Luca Frez-Albrecht
1. created branch "sprites"; all changes denoted here exist on this branch
2. imported sprites for the player: idle, jump, fall, stun, run
3. implemented sprite transitions and animations within the player state machine scripts; namely, PlayerNormal and PlayerStun. they appear to all work as planned, and as a bonus, the jump/fall sprites may be sufficient for the PULL state as well
4. set obj_player collision mask to player_idle for the sake of consistency while transitioning between sprites of different dimensions. this is a stopgap maneuver, as the player's collision box should be carefully tailored to suit all player states and not just chosen arbitrarily as it was here
5. removed obj_player_arm as a child of obj_player. it no longer appears in gameplay



### 3/30/2017 ###
Luca Frez-Albrecht
1. implemented player stun as part of the state machine. player loses control and just obeys physics for the number of frames assigned by the Knockback function
2. replaced obj_cleaner collisions, now using HandleCollision and changing direction at appropriate times. cleaners now bounce off and can ride on top of each other, and no longer get stuck in corners or small vertical passages



### 3/26-27/2017 ###
Luca Frez-Albrecht
1. new collision algorithm, again. this time, through some miracle, it appears to actually function as expected and i have yet to discover any real bugs
2. implemented a finite state machine to compartmentalize the player behaviors
3. the player sprite is now handled differently; this fixes a bug when the player switched direction while pressed against a wall, and is a good first step toward implementing the coming player sprites



### 3/19/2017 ###
Luca Frez-Albrecht
1. grappleKey = mouse_check_button(mb_left) for the sake of generality
2. implemented xAcceleration and friction forces for more nuanced player mobility
3. implemented a simple back-and-forth 'cleaner' enemy. along with this came systems for player health, temporary invincibility, and knockback (the Knockback script)



### 3/9/2017 ###
Luca Frez-Albrecht
1. trimmed spr_player canvas to make the collision box symmetric about center
2. implemented grappleState in place of hookshotSuccess
3. enforced grappleState locking to approach desired hookshot behavior



### 3/7/2017 ###
Luca Frez-Albrecht
1. reproduced the ternary operator in a script formed as IF(bool, expr1, expr2)
2. adapted an old algorithm to draw pixel-perfect lines as a means to produce adaptive, angle-based collisions.
   after some wrestling and debugging, it APPEARS to work perfectly, with one exception: the player sticks to
   horizontal surfaces when pushing into them (this should not be a difficult fix)



### 2/23/2017 ###
Luca Frez-Albrecht

1. edited grappling and drawing mechanisms to use a ray cast rather than just the mouse position. this allows
	the player to click in any direction at any distance, and the cast will follow the line from player
	center to mouse position as far as grappleReach allows, then grapple to the anchor on that line which
	falls nearest to the player
2. increased grappleReach and grappleSpeed significantly



### 2/16/2017 ###
Luca Frez-Albrecht

1. replaced place_meeting with position_meeting for hookshotSuccess, so that it only checks the mouse position
	rather than accounting for the shape of the player's hitbox. this corrected the grapple detection errors
2. implemented variable jump height (must hold key down to reach max height)
3. room changes; renamed Demo Room and added more chunks of obj_wall tiles
4. created obj_anchor. for testing purposes, they are orange; for play, we can set the draw event to do nothing
5. implemented a simple anchor generator: anchors are placed on top of obj_player_collide objects which are not
	surrounded on all four sides. a /slightly/ more advanced algorithm would place vertical and horizontal
	strips of vertical and horizontal obj_anchor children objects only on the faces which are exposed.
	** be careful when placing tiles, as two walls placed atop one another will intersect in all directions
	   and hence will not produce an anchor even if one should appear there
6. generalized grappleSpeed = 5 as a variable under obj_player
