
### MM/DD/YYYY ###
Name

1. Enumerated list of edits made
2. Place most recent logs above older ones



### 5/22/17 ###
Luca Frez-Albrecht
1. new ClearOverlap script to automatically remove duplicate tiles upon loading a room
2. player can change directions while hanging from a ceiling
3. obj_env_collide > obj_grappleable for the purpose of obj_slippery, a tile while can be collided with but not grappled
4. some changes to player FSM for grapple checking to allow for ungrappleable environment tiles
5. Demo3 with sparse platforms and ungrappleable sections
6. altered code for checking grapple endpoint again, in order to fix a case where the player is pulled diagonally toward a block but gets caught on the wrong side of a corner and pushed away from the grapple block. HOPEFULLY this is now solved more or less in generality. eesh.
7. resume button in pause menu
8. so many other things.
9. many new rooms



### 5/21/17 ###
Luca Frez-Albrecht
1. new sprites for cleaner, follower, and story logs, plus a palette swap for the player. in the process of tweaking level and menu background colors
2. new DrawAlias() script which improves appearance by temporarily rounding objects to nearest pixel before drawing
3. enemies now have invincibility frames and are affected by acid



### 5/19/17 ###
Luca Frez-Albrecht
1. finished implementing player grapple algorithm. hopefully it should never bug out and send the player flying infinitely any more
2. refined player death to make things more clear and user-friendly
3. manually added in james's enemy from origin/follower branch (see changelog copied below). performed some minor refactoring to increase code efficiency
4. refactored obj_cleaner as a finite state machine
5. created scripts to initialize and update stun, adding this functionality to both enemies
6. tried adding acid interaction with enemies, but as of yet unsuccessful

### 4/12/2017 ###
James Zhou
1. Added basic follower enemy (minRange starts following, maxRange stops following, when not following has set movement pattern).



### 5/12 - 5/17 ###
Luca Frez-Albrecht & Allison Kramer
1. "about" page added in the form of a room
2. obj_nav_button takes a room name as a variable and enters that room when clicked
3. added some new player sprites for hanging and pull states
4. replaced all player sprites with newly-aligned versions, including a single custom hitbox which works reasonably well for every sprite
5. added spr_heart and implemented a visualization for player health using the GUI
6. implemented final pause menu with buttons
7. prettied up the title screen



### 5/11/2017 ###
Luca Frez-Albrecht
1. some small progress toward making the grapple end appropriately instead of as soon as any collision occurs. there are some bugs associated with this, ie flying infinitely sometimes
2. created a "Menu" room, furnished with multiple pretty-ish buttons
3. obj_button will execute a named script (requires a wrapper for built-in functions) when clicked upon
4. obj_room_trigger will transition to a named room upon player collision



### 4/21/2017 ###
Luca Frez-Albrecht
1. added sprites for environment tiles, including acid
2. created obj_dirt, a new environment object
3. new script to randomly assign rock sprites and to generate grass on topside dirt tiles
4. created obj_acid which damages player upon contact
5. new script to auto-generate pools of acid (the developers must define the top line and the pool will fill in below it)
6. created Demo2 room to test above functionality and to offer another space to play around in



### 4/11/2017 ###
(Allison Kramer)
1. updated sprites branch to include story_log content previously merged into master
2. shifted player sprite origins to the bottom of each sprite
3. replaced basically every "y" with a "y+ySprOffset" so that raycast and draw calls are calculated from the player's shoulder height rather than from their feet
4. changed room view size too 800x600; window is no longer stretched disproportionately
5. added basic player attack (whip/laser) by using grapple button on enemies. this was not implemented very efficiently (~4 raycasts per click, lots of branching) BUT player cannot attack through walls and will either attack or grapple, never both


### 4/1/2017 ###
Luca Frez-Albrecht
1. created branch "sprites"; all changes denoted here exist on this branch
2. imported sprites for the player: idle, jump, fall, stun, run
3. implemented sprite transitions and animations within the player state machine scripts; namely, PlayerNormal and PlayerStun. they appear to all work as planned, and as a bonus, the jump/fall sprites may be sufficient for the PULL state as well
4. set obj_player collision mask to player_idle for the sake of consistency while transitioning between sprites of different dimensions. this is a stopgap maneuver, as the player's collision box should be carefully tailored to suit all player states and not just chosen arbitrarily as it was here
5. removed obj_player_arm as a child of obj_player. it no longer appears in gameplay



### 3/30/2017 ###
Luca Frez-Albrecht
1. implemented player stun as part of the state machine. player loses control and just obeys physics for the number of frames assigned by the Knockback function
2. replaced obj_cleaner collisions, now using HandleCollision and changing direction at appropriate times. cleaners now bounce off and can ride on top of each other, and no longer get stuck in corners or small vertical passages



### 3/26-27/2017 ###
Luca Frez-Albrecht
1. new collision algorithm, again. this time, through some miracle, it appears to actually function as expected and i have yet to discover any real bugs
2. implemented a finite state machine to compartmentalize the player behaviors
3. the player sprite is now handled differently; this fixes a bug when the player switched direction while pressed against a wall, and is a good first step toward implementing the coming player sprites



### 3/19/2017 ###
Luca Frez-Albrecht
1. grappleKey = mouse_check_button(mb_left) for the sake of generality
2. implemented xAcceleration and friction forces for more nuanced player mobility
3. implemented a simple back-and-forth 'cleaner' enemy. along with this came systems for player health, temporary invincibility, and knockback (the Knockback script)



### 3/9/2017 ###
Luca Frez-Albrecht
1. trimmed spr_player canvas to make the collision box symmetric about center
2. implemented grappleState in place of hookshotSuccess
3. enforced grappleState locking to approach desired hookshot behavior



### 3/7/2017 ###
Luca Frez-Albrecht
1. reproduced the ternary operator in a script formed as IF(bool, expr1, expr2)
2. adapted an old algorithm to draw pixel-perfect lines as a means to produce adaptive, angle-based collisions.
   after some wrestling and debugging, it APPEARS to work perfectly, with one exception: the player sticks to
   horizontal surfaces when pushing into them (this should not be a difficult fix)



### 2/23/2017 ###
Luca Frez-Albrecht

1. edited grappling and drawing mechanisms to use a ray cast rather than just the mouse position. this allows
	the player to click in any direction at any distance, and the cast will follow the line from player
	center to mouse position as far as grappleReach allows, then grapple to the anchor on that line which
	falls nearest to the player
2. increased grappleReach and grappleSpeed significantly



### 2/16/2017 ###
Luca Frez-Albrecht

1. replaced place_meeting with position_meeting for hookshotSuccess, so that it only checks the mouse position
	rather than accounting for the shape of the player's hitbox. this corrected the grapple detection errors
2. implemented variable jump height (must hold key down to reach max height)
3. room changes; renamed Demo Room and added more chunks of obj_wall tiles
4. created obj_anchor. for testing purposes, they are orange; for play, we can set the draw event to do nothing
5. implemented a simple anchor generator: anchors are placed on top of obj_player_collide objects which are not
	surrounded on all four sides. a /slightly/ more advanced algorithm would place vertical and horizontal
	strips of vertical and horizontal obj_anchor children objects only on the faces which are exposed.
	** be careful when placing tiles, as two walls placed atop one another will intersect in all directions
	   and hence will not produce an anchor even if one should appear there
6. generalized grappleSpeed = 5 as a variable under obj_player
