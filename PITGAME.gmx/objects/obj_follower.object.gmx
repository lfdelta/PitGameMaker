<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_follower_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

hp = 3;
SetStun(id, 30);

moveDir = 1;
moveSpeed = 1;
chaseSpeed = 3;
xVelocity = 0;
yVelocity = 0;

minRange = 250;
maxRange = 300;
chase = 0;
timer = 0;
freq = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Upkeep
HandleStun();
if (hp &lt;= 0)
    instance_destroy();

// Collisions with walls and other enemies
HandleCollision(id, obj_env_and_enemies);
if (place_meeting(x+xVelocity, y, obj_env_and_enemies))
    moveDir *= -1;

/// Movement
playerDist = point_distance(x,y,obj_player.x,obj_player.y);

if (chase) {
    sprite_index = spr_follower_chase;
    pointDir = point_direction(x,y,obj_player.x,obj_player.y);
    xVelocity = chaseSpeed * dcos(pointDir);
    yVelocity = chaseSpeed * -dsin(pointDir);
    chase = (playerDist &lt; maxRange); // continue to chase if dist &lt; max
} else {
    sprite_index = spr_follower_idle;
    xVelocity = 1.5 * moveSpeed * -dsin(timer * freq);
    yVelocity = moveSpeed * dcos(timer * 2*freq);
    timer++;
    chase = (playerDist &lt; minRange); // start chasing if dist &lt; min
}

// Collision with player
if (place_meeting(x+xVelocity, y+yVelocity, obj_player))
    Knockback(obj_player.id, 1, 5*sign(obj_player.x - x), -3, 30);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
