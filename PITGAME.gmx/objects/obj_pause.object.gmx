<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize shader

global.paused = false;

/*uni_resolution_hoz = shader_get_uniform(shd_gaussian_horizontal,"resolution");
uni_resolution_vert = shader_get_uniform(shd_gaussian_vertical,"resolution");
var_resolution_x = display_get_gui_width();
var_resolution_y = display_get_gui_height();

uni_blur_amount_hoz = shader_get_uniform(shd_gaussian_vertical,"blur_amount");
uni_blur_amount_vert = shader_get_uniform(shd_gaussian_horizontal,"blur_amount");
var_blur_amount = 1.0;

shader_enabled = false;
final_surface = surface_create(var_resolution_x,var_resolution_y);

surf = surface_create(var_resolution_x, var_resolution_y);

view_surface_id[0] = surf;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause or unpause the game

pauseButton = keyboard_check_pressed(vk_enter);

if(pauseButton &amp;&amp; !global.paused) {
    global.paused = true;
    
    /*shader_enabled = true;
    
    var width = surface_get_width(application_surface),
    var height = surface_get_height(application_surface);
    
    // This will create a sprite from the application surface, which will be the screenshot of the game.
    global.pauseBg = sprite_create_from_surface(application_surface, 0, 0, width, height, false, false, 0, 0);
    
    show_debug_message("Paused!");
    
    global.RoomBeforePause = room;
    room_persistent = true;
    
    room_goto(room_pause);

    show_debug_message("Drawing!");
    */
}
else if(pauseButton &amp;&amp; global.paused){
    show_debug_message("Unpaused!");
    
    global.paused = false;
    /*shader_enabled = false;
    
    room_goto(global.RoomBeforePause);
    room_persistent = false;
    
    sprite_delete(global.pauseBg);*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw menu

if(global.paused) {
    show_debug_message(view_current);
    
    draw_set_font(fnt_story_log);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    xpos = display_get_gui_width() * 0.5
    ypos = display_get_gui_height() * 0.5;
    
    /*//Do horizontal blur first
    surface_set_target(final_surface);
    if shader_enabled shader_set(shd_gaussian_horizontal);
        shader_set_uniform_f(uni_resolution_hoz, var_resolution_x, var_resolution_y);
        shader_set_uniform_f(uni_blur_amount_hoz, var_blur_amount);
        draw_surface(surf,0,0);
    shader_reset();
    surface_reset_target();
    
    //Do vertical blur last
    if shader_enabled shader_set(shd_gaussian_vertical);
        shader_set_uniform_f(uni_resolution_vert, var_resolution_x, var_resolution_y);
        shader_set_uniform_f(uni_blur_amount_vert, var_blur_amount);
        draw_surface(final_surface,0,0);
    shader_reset();*/

    draw_set_color(c_black);
    draw_rectangle(0, 0, display_get_gui_width(), display_get_gui_height(), false);
    
    draw_set_color(c_white);
    draw_text(xpos, ypos, "PAUSED");
    
    //draw_sprite(global.pauseBg, 0, 0, 0);
}
else {
    //draw_surface(surf,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
