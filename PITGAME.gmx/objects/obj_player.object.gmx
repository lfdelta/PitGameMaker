<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize properties

enum playerFSM { // finite state machine
    STUN = 0,
    NORMAL, // normal player control
    PULL,
    HANG,
    PUNCH,
    DEAD
}

depth = 0;

hp = 10;
iFrames = 60;
iCounter = 0;
isInvincible = 0; // boolean
stunFrames = 0;
stunCounter = 0;

xVelocity = 0;
xVelocityMax = 5;
xAcceleration = 1;
xFriction = 0.2;
yVelocity = 0;
yVelocityMax = 10;
jumpSpeed = 7;
grav = 0.2;

grappleReach = 300;
grappleSpeed = 10;
grappleToID = noone;
grappleTo = undefined;

playerState = playerFSM.NORMAL;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player FSM and upkeep

// Get player inputs
leftKey = keyboard_check(vk_left);
aKey = keyboard_check(ord('A'));
rightKey = keyboard_check(vk_right);
dKey = keyboard_check(ord('D'));
upKey = keyboard_check(vk_up);
wKey = keyboard_check(ord('W'));
grappleKey = mouse_check_button(mb_left);

moveDirection = max(dKey,rightKey) - max(aKey,leftKey);
jumpKey = max(wKey, upKey);

// Upkeep
if (isInvincible) {
    iCounter++;
    if (iCounter &gt;= iFrames) {
        iCounter = 0;
        isInvincible = 0;
    }
}
if (stunFrames &gt; 0) {
    playerState = playerFSM.STUN;
}

if (hp &lt;= 0) {
   playerState = playerFSM.DEAD;
}

// State machine
switch (playerState)
{
    case playerFSM.STUN:
        PlayerStun();
        break;
    case playerFSM.NORMAL:
        PlayerNormal();
        break;
    case playerFSM.PULL:
        PlayerPull();
        break;
    case playerFSM.HANG:
        PlayerHang();
        break;
    case playerFSM.DEAD:
        PlayerDead();
        break;
};
show_debug_message("state: " + string(playerState));

// Movement and collision with walls
HandleCollision(id, obj_env_collide);

if (place_meeting(x,y,obj_env_collide)) // used to happen on corners
    show_debug_message("oops"); // left for now in case something awful happens
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player and hookshot guide

grappleReach = obj_player.grappleReach;
grappleTo = obj_player.grappleTo;
playerState = obj_player.playerState;

// Draw the player
draw_self();

if(mouse_check_button(mb_left)) {
    // Draw a circle to indicate grapple range if click is out of range
    if (//!point_in_circle(mouse_x, mouse_y, x, y, grappleReach) ||
        playerState == playerFSM.NORMAL) {
        draw_set_colour(c_red);
        draw_set_circle_precision(48);
        draw_circle(x, y, grappleReach, true);
    }
}

// If grapple was successful, draw the grapple line
if (playerState == playerFSM.PULL) {
    draw_set_color(c_lime);
    draw_line(x, y, grappleTo[0], grappleTo[1]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
