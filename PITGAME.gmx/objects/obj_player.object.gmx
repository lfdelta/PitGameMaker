<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize properties

enum playerFSM { // finite state machine
    STUN = 0,
    NORMAL, // normal player control
    PULL,
    HANG,
    PUNCH,
    DEAD
}

depth = 0;
ySprOffset = -5; // distance from origin to shoulder
pauseKey = 0;

hp = 5;
SetStun(id, 60);
FSMstate = playerFSM.NORMAL;

xVelocity = 0;
xVelocityMax = 5;
xAcceleration = 1;
xFriction = 0.2;
yVelocity = 0;
yVelocityMax = 10;
jumpSpeed = 7;
grav = 0.2;
grappleReach = 300;
grappleDmg = 1;
grappleAtkID = noone;
grappleSpeed = 10;
grappleToID = noone;
grappleTo = undefined;
didHit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player FSM and upkeep

// Get player inputs
leftKey = keyboard_check(vk_left);
aKey = keyboard_check(ord('A'));
rightKey = keyboard_check(vk_right);
dKey = keyboard_check(ord('D'));
upKey = keyboard_check(vk_up);
wKey = keyboard_check(ord('W'));
grappleKey = mouse_check_button(mb_left);
grappleKey_P = mouse_check_button_pressed(mb_left);

moveDirection = max(dKey,rightKey) - max(aKey,leftKey);
jumpKey = max(wKey, upKey);

// Upkeep
HandleStun();

if (hp &lt;= 0) {
    FSMstate = playerFSM.DEAD;
}

// State machine
switch (FSMstate)
{
    case playerFSM.STUN:
        PlayerStun();
        break;
    case playerFSM.NORMAL:
        PlayerNormal();
        break;
    case playerFSM.PULL:
        PlayerPull();
        break;
    case playerFSM.HANG:
        PlayerHang();
        break;
    case playerFSM.DEAD:
        PlayerDead();
        break;
};

// Movement and collision with walls
HandleCollision(id, obj_env_collide);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw hookshot guide

if (grappleKey &amp;&amp; FSMstate == playerFSM.NORMAL) {
    if (grappleKey_P &amp;&amp; didHit) {
        // Draw a line to enemy if player attacked successfully
        draw_set_colour(c_aqua);
        draw_line(x, y+ySprOffset, grappleAtkX, grappleAtkY);
    } else {
        // Draw a circle to indicate grapple range
        draw_set_colour(c_red);
        draw_set_circle_precision(48);
        draw_circle(x, y+ySprOffset, grappleReach, true);
    }
}

// If grapple was successful, draw the grapple line
if (FSMstate == playerFSM.PULL) {
    draw_set_color(c_lime);
    draw_line(x, y+ySprOffset, grappleTo[0], grappleTo[1]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw health and death text

hpind = IF(isInvincible, 2, 0);
for (i = 0; i &lt; hp; i++)
    draw_sprite(spr_heart, hpind,
                view_xport[0] + i * (sprite_get_width(spr_heart) + 5) + 5,
                view_yport[0] + 5);
                
if (hp &lt;= 0) {
    guiW = display_get_gui_width();
    guiH = display_get_gui_height();

    draw_set_alpha(0.7);
    draw_set_colour(c_black);
    draw_rectangle(0, 0.35 * guiH, guiW, 0.65 * guiH, false);
    draw_set_alpha(1);
        
    draw_set_colour(c_red);
    draw_set_font(fnt_title);
    draw_text(0.5 * guiW, 0.5 * guiH, "YOU DIED.");
    
    draw_set_font(-1);
    draw_text(0.5 * guiW, 0.6 * guiH, "Press [ENTER] to return.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DrawAlias if player is alive

if (hp &gt; 0) DrawAlias();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
